import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  ScrollView,
  TextInput,
  Alert,
  Share,
  Platform,
} from 'react-native';
import { X, Share2, Mail, FileText, Calendar, Download, Copy, Send } from 'lucide-react-native';
import { useMedications } from '@/hooks/useMedications';

interface ShareScheduleModalProps {
  visible: boolean;
  onClose: () => void;
}

export function ShareScheduleModal({ visible, onClose }: ShareScheduleModalProps) {
  const { medications, generateSchedule } = useMedications();
  const [shareFormat, setShareFormat] = useState<'summary' | 'detailed' | 'calendar'>('summary');
  const [recipientEmail, setRecipientEmail] = useState('');
  const [customMessage, setCustomMessage] = useState('');
  const [dateRange, setDateRange] = useState<'today' | 'week' | 'month'>('week');

  const generateShareContent = () => {
    const today = new Date();
    const endDate = new Date();
    
    switch (dateRange) {
      case 'today':
        // Keep today
        break;
      case 'week':
        endDate.setDate(today.getDate() + 7);
        break;
      case 'month':
        endDate.setDate(today.getDate() + 30);
        break;
    }

    if (shareFormat === 'summary') {
      return generateSummaryContent();
    } else if (shareFormat === 'detailed') {
      return generateDetailedContent(today, endDate);
    } else {
      return generateCalendarContent(today, endDate);
    }
  };

  const generateSummaryContent = () => {
    const activeMeds = medications.filter(med => med.active !== false);
    
    let content = `📋 S.A.F.E. Meds - Medication Summary\n`;
    content += `Generated: ${new Date().toLocaleDateString()}\n\n`;
    
    if (activeMeds.length === 0) {
      content += `No active medications currently prescribed.\n`;
    } else {
      content += `Current Medications (${activeMeds.length}):\n\n`;
      
      activeMeds.forEach((med, index) => {
        content += `${index + 1}. ${med.name}\n`;
        content += `   • Dosage: ${med.dosage}\n`;
        content += `   • Frequency: ${med.frequency}\n`;
        if (med.notes) {
          content += `   • Notes: ${med.notes}\n`;
        }
        if (med.start_date) {
          content += `   • Started: ${new Date(med.start_date).toLocaleDateString()}\n`;
        }
        content += `\n`;
      });
    }

    content += `\n⚠️ This information is for reference only. Always consult with healthcare providers before making any changes to medication regimens.\n`;
    content += `\nGenerated by S.A.F.E. Meds App`;
    
    return content;
  };

  const generateDetailedContent = (startDate: Date, endDate: Date) => {
    const activeMeds = medications.filter(med => med.active !== false);
    
    let content = `📅 S.A.F.E. Meds - Detailed Schedule\n`;
    content += `Period: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}\n`;
    content += `Generated: ${new Date().toLocaleDateString()}\n\n`;

    if (activeMeds.length === 0) {
      content += `No active medications scheduled for this period.\n`;
      return content;
    }

    // Generate schedule for each day in the range
    const currentDate = new Date(startDate);
    while (currentDate <= endDate) {
      const daySchedule = generateSchedule(currentDate);
      
      content += `📆 ${currentDate.toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })}\n`;
      
      if (daySchedule.length === 0) {
        content += `   No medications scheduled\n\n`;
      } else {
        daySchedule.forEach(item => {
          const time = new Date(`2000-01-01T${item.time}`).toLocaleTimeString('en-US', {
            hour: 'numeric',
            minute: '2-digit',
            hour12: true
          });
          content += `   ${time} - ${item.medication} (${item.dosage})\n`;
          if (item.notes) {
            content += `     Notes: ${item.notes}\n`;
          }
        });
        content += `\n`;
      }
      
      currentDate.setDate(currentDate.getDate() + 1);
    }

    content += `\n⚠️ This schedule is for reference only. Always follow your healthcare provider's instructions.\n`;
    content += `\nGenerated by S.A.F.E. Meds App`;
    
    return content;
  };

  const generateCalendarContent = (startDate: Date, endDate: Date) => {
    const activeMeds = medications.filter(med => med.active !== false);
    
    let content = `📅 S.A.F.E. Meds - Calendar Format\n`;
    content += `Period: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}\n\n`;

    if (activeMeds.length === 0) {
      content += `No active medications to schedule.\n`;
      return content;
    }

    // Create a calendar-style format
    content += `MEDICATION CALENDAR\n`;
    content += `${'='.repeat(50)}\n\n`;

    activeMeds.forEach(med => {
      content += `💊 ${med.name.toUpperCase()}\n`;
      content += `Dosage: ${med.dosage} | Frequency: ${med.frequency}\n`;
      
      // Generate times for this medication
      const times = getScheduleTimes(med.frequency);
      content += `Times: ${times.map(time => {
        const timeObj = new Date(`2000-01-01T${time}`);
        return timeObj.toLocaleTimeString('en-US', {
          hour: 'numeric',
          minute: '2-digit',
          hour12: true
        });
      }).join(', ')}\n`;
      
      if (med.notes) {
        content += `Notes: ${med.notes}\n`;
      }
      content += `\n`;
    });

    content += `\n⚠️ Always consult your healthcare provider for medication guidance.\n`;
    content += `\nGenerated by S.A.F.E. Meds App`;
    
    return content;
  };

  const getScheduleTimes = (frequency: string): string[] => {
    const freq = frequency.toLowerCase();
    
    if (freq.includes('once') || freq.includes('daily') || freq.includes('qd')) {
      return ['08:00'];
    } else if (freq.includes('twice') || freq.includes('bid')) {
      return ['08:00', '20:00'];
    } else if (freq.includes('three') || freq.includes('tid')) {
      return ['08:00', '14:00', '20:00'];
    } else if (freq.includes('four') || freq.includes('qid')) {
      return ['08:00', '12:00', '16:00', '20:00'];
    } else if (freq.includes('every 4')) {
      return ['06:00', '10:00', '14:00', '18:00', '22:00'];
    } else if (freq.includes('every 6')) {
      return ['06:00', '12:00', '18:00', '24:00'];
    } else if (freq.includes('every 8')) {
      return ['08:00', '16:00', '24:00'];
    } else if (freq.includes('every 12')) {
      return ['08:00', '20:00'];
    } else {
      return ['08:00']; // Default to once daily
    }
  };

  const handleNativeShare = async () => {
    try {
      const content = generateShareContent();
      const message = customMessage ? `${customMessage}\n\n${content}` : content;
      
      const result = await Share.share({
        message: message,
        title: 'Medication Schedule',
      });

      if (result.action === Share.sharedAction) {
        Alert.alert('Success', 'Schedule shared successfully!');
        onClose();
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to share schedule. Please try again.');
    }
  };

  const handleCopyToClipboard = async () => {
    try {
      const content = generateShareContent();
      const message = customMessage ? `${customMessage}\n\n${content}` : content;
      
      if (Platform.OS === 'web') {
        await navigator.clipboard.writeText(message);
      } else {
        // For mobile platforms, you'd use Expo Clipboard
        // import * as Clipboard from 'expo-clipboard';
        // await Clipboard.setStringAsync(message);
      }
      
      Alert.alert('Copied', 'Schedule copied to clipboard!');
    } catch (error) {
      Alert.alert('Error', 'Failed to copy to clipboard.');
    }
  };

  const handleEmailShare = () => {
    const content = generateShareContent();
    const message = customMessage ? `${customMessage}\n\n${content}` : content;
    const subject = `Medication Schedule - ${new Date().toLocaleDateString()}`;
    
    if (Platform.OS === 'web') {
      const mailtoUrl = `mailto:${recipientEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(message)}`;
      window.open(mailtoUrl);
    } else {
      // For mobile, you could use expo-mail-composer
      Alert.alert('Email', 'Email functionality would open your default email app.');
    }
    
    onClose();
  };

  const formatOptions = [
    { key: 'summary', label: 'Summary', icon: FileText, description: 'Basic medication list' },
    { key: 'detailed', label: 'Detailed', icon: Calendar, description: 'Day-by-day schedule' },
    { key: 'calendar', label: 'Calendar', icon: Calendar, description: 'Calendar format' },
  ] as const;

  const dateRangeOptions = [
    { key: 'today', label: 'Today Only' },
    { key: 'week', label: 'Next 7 Days' },
    { key: 'month', label: 'Next 30 Days' },
  ] as const;

  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={onClose}
    >
      <View style={styles.container}>
        <View style={styles.header}>
          <View style={styles.headerContent}>
            <Share2 size={24} color="#2563EB" />
            <Text style={styles.title}>Share Schedule</Text>
          </View>
          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <X size={24} color="#64748B" />
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Share Format</Text>
            <View style={styles.formatGrid}>
              {formatOptions.map(({ key, label, icon: Icon, description }) => (
                <TouchableOpacity
                  key={key}
                  style={[
                    styles.formatOption,
                    shareFormat === key && styles.formatOptionSelected
                  ]}
                  onPress={() => setShareFormat(key)}
                >
                  <Icon 
                    size={20} 
                    color={shareFormat === key ? '#2563EB' : '#64748B'} 
                  />
                  <Text style={[
                    styles.formatLabel,
                    shareFormat === key && styles.formatLabelSelected
                  ]}>
                    {label}
                  </Text>
                  <Text style={styles.formatDescription}>{description}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          {shareFormat !== 'summary' && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Date Range</Text>
              <View style={styles.dateRangeContainer}>
                {dateRangeOptions.map(({ key, label }) => (
                  <TouchableOpacity
                    key={key}
                    style={[
                      styles.dateRangeOption,
                      dateRange === key && styles.dateRangeOptionSelected
                    ]}
                    onPress={() => setDateRange(key)}
                  >
                    <Text style={[
                      styles.dateRangeText,
                      dateRange === key && styles.dateRangeTextSelected
                    ]}>
                      {label}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          )}

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Custom Message (Optional)</Text>
            <TextInput
              style={styles.messageInput}
              placeholder="Add a personal message..."
              value={customMessage}
              onChangeText={setCustomMessage}
              multiline
              numberOfLines={3}
              placeholderTextColor="#94A3B8"
            />
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Email Recipient (Optional)</Text>
            <TextInput
              style={styles.emailInput}
              placeholder="doctor@example.com"
              value={recipientEmail}
              onChangeText={setRecipientEmail}
              keyboardType="email-address"
              autoCapitalize="none"
              placeholderTextColor="#94A3B8"
            />
          </View>

          <View style={styles.previewSection}>
            <Text style={styles.sectionTitle}>Preview</Text>
            <View style={styles.previewContainer}>
              <ScrollView style={styles.previewScroll} nestedScrollEnabled>
                <Text style={styles.previewText}>
                  {generateShareContent().substring(0, 300)}...
                </Text>
              </ScrollView>
            </View>
          </View>
        </ScrollView>

        <View style={styles.footer}>
          <TouchableOpacity style={styles.actionButton} onPress={handleCopyToClipboard}>
            <Copy size={20} color="#64748B" />
            <Text style={styles.actionButtonText}>Copy</Text>
          </TouchableOpacity>

          {recipientEmail ? (
            <TouchableOpacity style={styles.primaryButton} onPress={handleEmailShare}>
              <Mail size={20} color="#FFFFFF" />
              <Text style={styles.primaryButtonText}>Send Email</Text>
            </TouchableOpacity>
          ) : (
            <TouchableOpacity style={styles.primaryButton} onPress={handleNativeShare}>
              <Send size={20} color="#FFFFFF" />
              <Text style={styles.primaryButtonText}>Share</Text>
            </TouchableOpacity>
          )}
        </View>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    fontFamily: 'Inter-SemiBold',
    color: '#1E293B',
    marginLeft: 8,
  },
  closeButton: {
    padding: 8,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#1E293B',
    marginBottom: 12,
  },
  formatGrid: {
    gap: 12,
  },
  formatOption: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    borderWidth: 2,
    borderColor: '#E2E8F0',
    alignItems: 'center',
  },
  formatOptionSelected: {
    borderColor: '#2563EB',
    backgroundColor: '#EFF6FF',
  },
  formatLabel: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    color: '#64748B',
    marginTop: 8,
    marginBottom: 4,
  },
  formatLabelSelected: {
    color: '#2563EB',
  },
  formatDescription: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: '#94A3B8',
    textAlign: 'center',
  },
  dateRangeContainer: {
    flexDirection: 'row',
    gap: 8,
  },
  dateRangeOption: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderWidth: 1,
    borderColor: '#E2E8F0',
    alignItems: 'center',
  },
  dateRangeOptionSelected: {
    backgroundColor: '#2563EB',
    borderColor: '#2563EB',
  },
  dateRangeText: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: '#64748B',
  },
  dateRangeTextSelected: {
    color: '#FFFFFF',
  },
  messageInput: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#1E293B',
    borderWidth: 1,
    borderColor: '#E2E8F0',
    height: 80,
    textAlignVertical: 'top',
  },
  emailInput: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#1E293B',
    borderWidth: 1,
    borderColor: '#E2E8F0',
  },
  previewSection: {
    marginBottom: 20,
  },
  previewContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E2E8F0',
    height: 120,
  },
  previewScroll: {
    padding: 16,
  },
  previewText: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: '#64748B',
    lineHeight: 18,
  },
  footer: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E2E8F0',
    gap: 12,
  },
  actionButton: {
    flex: 1,
    backgroundColor: '#F1F5F9',
    borderRadius: 12,
    paddingVertical: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  actionButtonText: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#64748B',
  },
  primaryButton: {
    flex: 1,
    backgroundColor: '#2563EB',
    borderRadius: 12,
    paddingVertical: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  primaryButtonText: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#FFFFFF',
  },
});